{"version":3,"file":"phase-filter-manager.js","sources":["../src/defaultFilter.vert","../src/acs.vert","../src/acs.frag","../src/Filter.js","../src/FilterScope.js","../src/FilterRects.js","../src/filter-rescale/rescale.vert","../src/filter-rescale/RescaleFilter.js","../src/FilterPass.js","../src/FilterSystem.js","../src/CompositeFilter.js","../src/FilterPipe.js","../src/index.js"],"sourcesContent":["attribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;// actually the input texture coord (gl_FragColor to set output)\n\nuniform vec4 inputSize;\nuniform vec4 inputFrame;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n\n    vec2 outTextureCoord = aVertexPosition * (outputFrame.zw * inputSize.zw);\n    vTextureCoord = clamp(outTextureCoord + (outputFrame.xy - inputFrame.xy) * inputSize.zw,\n        vec2(.0, .0), inputFrame.zw * inputSize.zw);\n}\n","/* Absolute Coordinate Supplement Shader */\n\nattribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;// actually the input texture coord (gl_FragColor to set output)\nvarying vec2 vAbsoluteCoord;\n\nuniform vec4 inputSize;\nuniform vec4 inputFrame;\nuniform vec4 outputFrame;\n\nvoid main(void)\n{\n    vec2 absolutePosition = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    // projected position!\n    gl_Position = vec4((projectionMatrix * vec3(absolutePosition, 1.0)).xy, 0.0, 1.0);\n\n    vec2 outTextureCoord = aVertexPosition * (outputFrame.zw * inputSize.zw);\n    vTextureCoord = clamp(outTextureCoord - (inputFrame.xy - outputFrame.xy) * inputSize.zw,\n        vec2(0, 0), vec2((inputFrame.zw - vec2(0.5, 0.5)) * inputSize.zw));\n    vAbsoluteCoord = absolutePosition;\n}\n","varying vec2 vTextureCoord;\nvarying vec2 vAbsoluteCoord;// unused!\n\nuniform sampler2D uSampler;\n\nvoid main(void){\n   gl_FragColor = texture2D(uSampler, vTextureCoord);\n}\n","import { Filter as BaseFilter } from 'pixi.js';\nimport defaultVertex from './defaultFilter.vert';\nimport acsVertex from './acs.vert';\nimport acsFragment from './acs.frag';\n\n/**\n * A filter applies a post-processing effect on an input texture.\n *\n * @class\n * @extends PIXI.Filter\n */\nexport class Filter extends BaseFilter\n{\n    /** @override */\n    constructor(vertex = defaultVertex, fragment, uniforms)\n    {\n        super(vertex, fragment, uniforms);\n\n        this.additivePadding = false;\n\n        this.nestedFilters = [];\n\n        this.parentFilter = null;// are you just a filter-pass for another fitler?\n\n        this.padding = undefined;\n\n        /**\n         * Render options that work when applying this filter.\n         *\n         * @member {PIXI.RenderOptions}\n         */\n        this.renderOptions = {};\n    }\n\n    /**\n     * @memberof PIXI.Filter\n     * @member {number}\n     * @name defaultPadding\n     * @abstract\n     *\n     * Create a <code>defaultPadding</code> property if your filter has an instrinsic need\n     * for one. The padding can be overridden by the client. The default padding\n     * should return the padding needed when viewport scale is 1 (it should not\n     * consider viewport in its calculation)\n     */\n\n    /**\n     * @memberof PIXI.Filter\n     * @member {number}\n     * @name defaultResolution\n     * @abstract\n     *\n     * Create a <code>defaultResolution</code> property if your filter recommends a\n     * specific resolution. This should be 1, 2, or 4, but not more since higher resolutions\n     * need more memory.\n     */\n\n    get padding()\n    {\n        let normalPadding;// padding when viewport scale is 1\n\n        if (this._paddingOverride !== undefined)\n        {\n            normalPadding = this._paddingOverride;\n        }\n        else if (this.defaultPadding !== undefined)\n        {\n            normalPadding = this.defaultPadding;\n        }\n        else\n        {\n            normalPadding = 0;\n        }\n\n        let padding = normalPadding * this.viewportScale;\n\n        for (const filter of this.nestedFilters)\n        {\n            padding = Math.max(filter.padding, padding);\n        }\n\n        return Math.ceil(padding);\n    }\n    set padding(value)\n    {\n        this._paddingOverride = value;\n    }\n\n    /**\n     * Overridable method called by `measure`. Use this to provide your custom measurements,\n     * by setting `this._frame` and `this._renderable`.\n     * @param {PIXI.Rectangle} targetBounds\n     * @param {PIXI.Rectangle} passBounds\n     * @param {number} padding\n     * @abstract\n     * @see {@link PIXI.Filter#frame}\n     * @see {@link PIXI.Filter#renderable}\n     */\n    onMeasure(targetBounds, passBounds, padding)// eslint-disable-line no-unused-vars\n    {\n        this._frame = passBounds;\n        this._renderable = true;\n    }\n\n    /**\n     * Measures the input frame needed by this filter to calculate pixels\n     * in the pass-output. It should keep the results in `Filter#frame`\n     * @param {PIXI.Rectangle} targetBounds - bounds of the target object\n     * @param {PIXI.Rectangle} passBounds - frame in which output is required\n     * @param {number} padding - padding applied in the target bounds\n     */\n    measure(targetBounds, passBounds, padding)\n    {\n        this.onMeasure(targetBounds, passBounds, padding);\n\n        if (this.frame === null || this.frame === undefined)\n        {\n            throw new Error(`${this.constructor.name}#onMeasure does not set Filter#_frame.`);\n        }\n        if (this.renderable === undefined)\n        {\n            throw new Error(`${this.constructor.name}#onMeasure does not set Filter#_renderable.`);\n        }\n\n        for (const filter of this.nestedFilters)\n        {\n            filter.measure(targetBounds, passBounds, padding);\n            this._frame.enlarge(filter._frame);\n            this._renderable = this._renderable && filter._renderable;\n        }\n\n        for (const filter of this.nestedFilters)\n        {\n            filter._frame.copyFrom(this._frame);\n        }\n    }\n\n    /**\n     * Input frame required by this filter, as recorded by the last measure\n     * pass.\n     * @returns {PIXI.Rectangle}\n     */\n    get frame()\n    {\n        return this._frame;\n    }\n\n    /**\n     * Whether this filter can be applied without reducing the refresh rate\n     * significantly\n     * @returns {boolean}\n     */\n    get renderable()\n    {\n        return this._renderable;\n    }\n\n    get viewportScale()\n    {\n        return this.viewport ? Math.max(this.viewport.scale.x, this.viewport.scale.y) : 1;\n    }\n\n    apply(filterManager, input, output, clear, state, renderOptions)\n    {\n        filterManager.applyFilter(this, input, output, clear, renderOptions);\n    }\n\n    static get defaultVertexSrc()\n    {\n        return defaultVertex;\n    }\n\n    static get defaultFragmentSrc()\n    {\n        return BaseFilter.defaultFragmentSrc;\n    }\n\n    static get acsVertexSrc()\n    {\n        return acsVertex;\n    }\n\n    static get acsFragmentSrc()\n    {\n        return acsFragment;\n    }\n}\n\nFilter.BaseFilter = BaseFilter;\n\nexport default Filter;\n","import { Point, Rectangle } from 'pixi.js';\n\nconst defaultScale = new Point(1, 1);\n\nconst defaultViewport = {\n    scale: defaultScale,\n};\n\n/**\n * Stateful object for handling filters of a specific display object.\n *\n * @class\n * @private\n */\nexport class FilterScope\n{\n    constructor()\n    {\n        /**\n         * The render-texture that was used to draw the object without filters. It\n         * need not contain the same data.\n         * @readonly\n         * @member {PIXI.RenderTexture}\n         */\n        this.renderTexture = null;\n\n        /**\n         * Whether the filter is allowed to write on the input texture; this is `true`\n         * by default but filters can use this to communicate with nested filters.\n         * @member {boolean}\n         */\n        this.inputWritable = true;\n\n        /**\n         * Whether returning a texture different than the given output is allowed\n         * for the current filter pass. This can also be used by filters to communicate\n         * with nested filters.\n         * @member {boolean}\n         */\n        this.outputSwappable = false;\n\n        /**\n         * Target of the filters\n         * We store for case when custom filter wants to know the element it was applied on\n         * @readonly\n         * @member {PIXI.DisplayObject}\n         */\n        this.target = null;\n\n        /**\n         * Compatibility with PixiJS v4 filters\n         * @readonly\n         * @member {boolean}\n         * @default false\n         */\n        this.legacy = false;\n\n        /**\n         * Resolution of filters\n         * @readonly\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        /**\n         * Whether all filters can be rendered in reasonable time.\n         * @readonly\n         * @member {boolean}\n         */\n        this.renderable = true;\n\n        /**\n         * Frame of the target object's total filter area (including padding).\n         * @readonly\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this.targetFrame = null;\n\n        /**\n         * Frame in which pixels are to be calculated for rendering onto the\n         * final renderTexture/screen.\n         * @readonly\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this.outputFrame = new Rectangle();\n\n        /**\n         * Dimensions of the render-texture that will be mapped onto the screen.\n         * @readonly\n         * @member {PIXI.Point}\n         * @private\n         */\n        this.textureDimensions = new Point();\n\n        /**\n         * Dimensions of the render texture multiplied by the resolution. These are\n         * actual number of pixels in the render-texture. If the resolution is greater\n         * than 1, then the render-texture will be downscaled before rendering to the\n         * screen.\n         */\n        this.texturePixels = new Point();\n\n        /**\n         * Collection of filters\n         * @readonly\n         * @member {PIXI.Filter[]}\n         * @private\n         */\n        this.filters = [];\n\n        /**\n         * Pipeline of filter passes.\n         * @readonly\n         * @member {FilterPass[]}\n         */\n        this.filterPasses = [];\n\n        /**\n         * Filter pass index.\n         * @readonly\n         * @member {number}\n         */\n        this.currentIndex = 0;\n\n        /**\n         * Viewport object for reading scal.\n         * @member {PIXI.Viewport}\n         * @readonly\n         */\n        this.viewport = defaultViewport;\n    }\n\n    get currentFilter()\n    {\n        return this.filters[this.currentIndex];\n    }\n\n    get currentFilterPass()\n    {\n        return this.filterPasses[this.currentIndex];\n    }\n\n    /**\n     * Legacy alias of `FilterPipe#inputFrame`.\n     * @returns {PIXI.Rectangle}\n     */\n    get sourceFrame()\n    {\n        return this.inputFrame;\n    }\n\n    /**\n     * Legacy alias of `FilterPipe#textureDimensions`, in `PIXI.Rectangle` form.\n     * @returns {PIXI.Rectangle}\n     */\n    get destinationFrame()\n    {\n        return new Rectangle(0, 0, this.textureDimensions.x, this.textureDimensions.y);\n    }\n\n    /**\n     * Bounds of the target, without the filter padding. Don't modify the returned object.\n     * @returns {PIXI.Rectangle}\n     */\n    get nakedTargetBounds()\n    {\n        if (this._nakedTargetBounds)\n        {\n            return this._nakedTargetBounds;\n        }\n\n        this._nakedTargetBounds = this.target.getBounds(true);// don't update transform during a render pass\n\n        return this._nakedTargetBounds;\n    }\n\n    /**\n     * The source frame, just without the padding applied; use this for clamping. It is\n     * the naked target bounds intersected with the screen. Don't modify the returned\n     * object.\n     * @returns {PIXI.Rectangle}\n     */\n    get nakedSourceFrame()\n    {\n        if (this._nakedSourceFrame)\n        {\n            return this._nakedSourceFrame;\n        }\n\n        this._nakedSourceFrame = this.nakedTargetBounds.clone().fit(this.outputFrame);\n\n        return this._nakedSourceFrame;\n    }\n\n    normalize(ivec, ovec)\n    {\n        ovec.x = ivec.x * this.viewport.scale.x / this.texturePixels.x;\n        ovec.y = ivec.y * this.viewport.scale.y / this.texturePixels.y;\n    }\n\n    /**\n     * Clears the state\n     * @private\n     */\n    clear()\n    {\n        this.target = null;\n        this.filters = null;\n        this.renderTexture = null;\n        this.resolution = 0;\n        this.viewport = defaultViewport;\n        this._nakedTargetBounds = null;\n        this._nakedSourceFrame = null;\n\n        this.textureDimensions.set();\n    }\n}\n\nexport default FilterScope;\n","export const FILTER_RECTS = {\n    NAKED_TARGET: 1,\n    WHOLE_INPUT: 11,\n};\n\nexport default FILTER_RECTS;\n","#define SHADER_NAME_ RescaleFilter\n\nattribute vec2 aVertexPosition;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;// actually the input texture coord (gl_FragColor to set output)\n\nuniform vec4 inputSize;\nuniform vec4 inputFrame;\nuniform vec4 outputFrame;\n\nvec4 filterVertexPosition( void )\n{\n    vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n\n    return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n}\n\nvoid main(void)\n{\n    gl_Position = filterVertexPosition();\n\n    vTextureCoord = aVertexPosition * inputFrame.zw * inputSize.zw;\n}\n","import { Filter } from '../Filter';\nimport rescaleVertexSrc from './rescale.vert';\nimport { SCALE_MODES } from 'pixi.js';\n\n/**\n * Instead of applying a \"shift\" to fragments from the input-frame into the\n * output-frame, the rescale-filter will transform the vertex stream so that\n * all of the input-frame is visible in the output-frame.\n *\n * @class\n * @extends PIXI.Filter\n */\nexport class RescaleFilter extends Filter\n{\n    constructor()\n    {\n        super(rescaleVertexSrc, Filter.defaultFragmentSrc);\n\n        this.scaleMode = SCALE_MODES.LINEAR;\n    }\n\n    apply(filterManager, input, output, clear, state)\n    {\n        const sm = input.scaleMode;\n\n        input.baseTexture.scaleMode = this.scaleMode;\n        input.baseTexture.update();\n        super.apply(filterManager, input, output, clear, state);\n        input.baseTexture.scaleMode = sm;\n        input.baseTexture.update();\n    }\n}\n","import { Rectangle } from 'pixi.js';\n\n/**\n * Data object to store relevant filter frames for a filter.\n *\n * @namespace PIXI\n * @class\n * @private\n */\nexport class FilterPass\n{\n    constructor(inputFrame = null, targetInFrame = null,\n        outputFrame = null, targetOutFrame = null, destinationFrame)\n    {\n        this.inputFrame = inputFrame;\n        this.targetInFrame = targetInFrame;\n        this.outputFrame = outputFrame;\n        this.targetOutFrame = targetOutFrame;\n\n        this.destinationFrame = destinationFrame;\n    }\n\n    reset()\n    {\n        /**\n         * The filter-frame of the input texture.\n         * @member {PIXI.Rectangle}\n         */\n        this.inputFrame = null;\n\n        /**\n         * The frame inside the input-frame on which the filter is to be applied.\n         * @member {PIXI.Rectangle}\n         */\n        this.targetInFrame = null;\n\n        /**\n         * The filter-frame of the output render-texture.\n         * @member {PIXI.Rectangle}\n         */\n        this.outputFrame = null;\n\n        /**\n         * The frame inside the output-frame in which the filter's results will be\n         * written. Anything outside this will be copied from the input texture.\n         * @member {PIXI.Rectangle}\n         */\n        this.targetOutFrame = null;\n\n        this.destinationFrame = null;\n    }\n}\n","import { systems, Geometry, DRAW_MODES, Rectangle } from 'pixi.js';\nimport { Filter } from './Filter';\nimport { FilterScope as FilterPipe } from './FilterScope';\nimport FilterRects from './FilterRects';\nimport { RescaleFilter } from './filter-rescale';\nimport { FilterPass } from './FilterPass';\n\nconst GEOMETRY_INDICES = [0, 1, 3, 2];\n\n/**\n * Customized filter system for phase software. Features that are currently pending\n * to be merged into PixiJS:\n *\n * 1. Measurement pass\n * 2. Filter-pipe\n * 3. Composite filters\n * 4. Object clamp\n * 5. Custom \"push\" options\n *\n * @class\n * @extends PIXI.FilterSystem\n */\nexport class FilterSystem extends systems.FilterSystem\n{\n    constructor(renderer, ...args)\n    {\n        super(renderer, ...args);\n\n        this.globalUniforms.uniforms.inputFrameInverse = new Float32Array(2);\n        this.globalUniforms.uniforms.outputFrameInverse = new Float32Array(2);\n        this.globalUniforms.uniforms.objectClamp = new Float32Array(4);\n\n        this.globalUniforms.uniforms.inputFrame = new Rectangle();\n\n        this.identityFilter = new Filter();\n        this.rescaleFilter = new RescaleFilter();\n    }\n\n    /**\n     * @param {PIXI.DisplayObject} target\n     * @param {PIXI.Filter[]} filters\n     * @param {PIXI.ScopeOptions} options\n     * @override\n     */\n    push(target, filters, options = target.filterOptions ? target.filterOptions : {})\n    {\n        const { renderer, defaultFilterStack: filterStack } = this;\n        const state = this._newPipe(target, filters);\n\n        if (filterStack.length === 1)\n        {\n            this.defaultFilterStack[0].renderTexture = renderer.renderTexture.current;\n\n            if (this.renderer.renderTexture.current)\n            {\n                this.renderer.renderTexture.current.filterFrame = this.renderer.renderTexture.sourceFrame.clone();\n            }\n        }\n\n        filterStack.push(state);\n\n        if (options.viewport)\n        {\n            state.viewport = options.viewport;\n        }\n\n        this.measure(state);\n\n        if (options.padding)\n        {\n            state.padding = Math.max(options.padding, state.padding);\n        }\n        if (options.resolution)\n        {\n            state.resolution = options.resolution;\n        }\n\n        if (state.filters.length > 0)\n        {\n            state.renderTexture = this.filterPassRenderTextureFor(state);\n            state.textureDimensions.set(state.renderTexture.width, state.renderTexture.height);\n            state.texturePixels.copyFrom(state.textureDimensions);\n\n            state.renderTexture.filterFrame = state.inputFrame.clone().ceil(1);\n\n            renderer.renderTexture.bind(state.renderTexture, state.inputFrame,\n                new Rectangle(0, 0, state.inputFrame.width, state.inputFrame.height));\n            renderer.renderTexture.clear();\n\n            const limit = renderer.gl.getParameter(renderer.gl.MAX_TEXTURE_SIZE);\n\n            if (state.renderTexture.width > limit || state.renderTexture.height > limit)\n            {\n                throw new Error('Cannot execute filters: too large texture size.');\n            }\n        }\n\n        this.activeState = state;\n    }\n\n    pop()\n    {\n        const filterStack = this.defaultFilterStack;\n        const state = filterStack.pop();\n        const filters = state.filters;\n\n        this.activeState = state;\n\n        state.currentIndex = 0;\n\n        if (filters.length > 0)\n        {\n            const globalUniforms = this.globalUniforms.uniforms;\n            const { inputSize, inputPixel, inputClamp } = globalUniforms;\n\n            globalUniforms.resolution = state.resolution;\n\n            inputSize[0] = state.textureDimensions.x;\n            inputSize[1] = state.textureDimensions.y;\n            inputSize[2] = 1.0 / inputSize[0];\n            inputSize[3] = 1.0 / inputSize[1];\n\n            inputPixel[0] = inputSize[0] * state.resolution;\n            inputPixel[1] = inputSize[1] * state.resolution;\n            inputPixel[2] = 1.0 / inputPixel[0];\n            inputPixel[3] = 1.0 / inputPixel[1];\n\n            inputClamp[0] = 0.5 * inputPixel[2];\n            inputClamp[1] = 0.5 * inputPixel[3];\n\n            const lastState = filterStack[filterStack.length - 1];\n\n            if (filters.length === 1)\n            {\n                this.passUniforms(state, 0);\n                filters[0].apply(this, state.renderTexture, lastState.renderTexture, false, state);\n\n                this.returnFilterTexture(state.renderTexture);\n            }\n            else\n            {\n                let flip = state.renderTexture;\n\n                let flop = this.getOptimalFilterTexture(\n                    flip.width,\n                    flip.height,\n                    state.resolution,\n                );\n\n                let i = 0;\n\n                state.outputSwappable = true;\n                state.inputWritable = true;\n\n                for (i = 0; i < filters.length - 1; ++i)\n                {\n                    this.passUniforms(state, i);\n                    flop.filterFrame = this.outputFrame.clone().ceil(1);\n\n                    const output = filters[i].apply(this, flip, flop, true, state);\n\n                    if (output && output !== flop) // output is different from the given one\n                    {\n                        if (output !== flip) // output is different than the provided input\n                        {\n                            this.returnFilterTexture(flop);\n                            flop = output;\n                        }\n                        else\n                        {\n                            ++state.currentIndex;\n                            continue;// no need to flip-flop since input already was made the output\n                        }\n                    }\n\n                    const t = flip;\n\n                    flip = flop;\n                    flop = t;\n\n                    ++state.currentIndex;\n                }\n\n                this.passUniforms(state, filters.length - 1);\n                state.outputSwappable = false;\n                state.inputWritable = true;\n\n                filters[i].apply(this, flip, lastState.renderTexture, false, state);\n\n                this.returnFilterTexture(flip);\n                this.returnFilterTexture(flop);\n            }\n        }\n\n        state.clear();\n        this.statePool.push(state);\n    }\n\n    get inputFrame()\n    {\n        return this.globalUniforms.uniforms.inputFrame;\n    }\n\n    get outputFrame()\n    {\n        return this.globalUniforms.uniforms.outputFrame;\n    }\n\n    /** @override */\n    applyFilter(filter, input, output, clear, options = this.resolveRenderOptions(filter.renderOptions, this.activeState))\n    {\n        const renderer = this.renderer;\n\n        renderer.renderTexture.bind(output,\n            output ? output.filterFrame : null, options.destinationFrame || (output && output.destinationFrame));\n\n        if (clear && options.destinationFrame)\n        {\n            const gl = this.renderer.gl;\n            const { x, y, width, height } = options.destinationFrame;\n\n            gl.enable(gl.SCISSOR_TEST);\n            gl.scissor(x, y, width, height);\n            renderer.renderTexture.clear([Math.random(), Math.random(), Math.random(), 1]);\n            renderer.scissor.pop();\n        }\n        else if (clear)\n        {\n            renderer.renderTexture.clear();\n        }\n\n        filter.uniforms.uSampler = input;\n        filter.uniforms.filterGlobals = this.globalUniforms;\n\n        renderer.state.set(options.state ? options.state : filter.state);\n        renderer.shader.bind(filter);\n\n        if (options.geometry)\n        {\n            renderer.geometry.bind(options.geometry);\n            renderer.geometry.draw(options.drawMode ? options.drawMode : DRAW_MODES.TRIANGLE_STRIP);\n        }\n        else if (filter.legacy)\n        {\n            this.quadUv.map(input._frame, input.filterFrame);\n\n            renderer.geometry.bind(this.quadUv);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLES);\n        }\n        else\n        {\n            renderer.geometry.bind(this.quad);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);\n        }\n    }\n\n    /**\n     * Measures all the frames needed in the given pipe. This includes\n     * the target, input, output, and each filter's frame.\n     *\n     * NOTE: `measure` also calculates `resolution`, `padding`,\n     *  and `legacy` of the pipe.\n     *\n     * @param {FilterScope} state\n     */\n    measure(state)\n    {\n        const { target } = state;\n        let { filters } = state;\n\n        let resolution = filters[0].resolution;\n\n        let autoFit = filters[0].autoFit;\n\n        let legacy = filters[0].legacy;\n\n        let padding = filters[0].padding;\n\n        for (let i = 1; i < filters.length; i++)\n        {\n            const filter =  filters[i];\n\n            resolution = Math.min(resolution, filter.resolution);\n            autoFit = autoFit && filter.autoFit;\n            legacy = legacy || filter.legacy;\n\n            if (!filter.additivePadding)\n            {\n                padding = Math.max(padding, filter.padding);\n            }\n            else\n            {\n                padding += filter.padding;\n            }\n        }\n\n        // target- & output- frame measuring pass\n        state.resolution = resolution;\n        state.legacy = legacy;\n        state.target = target;\n        state.padding = padding;\n        state.outputFrame.copyFrom(target.filterArea || target.getBounds(true));\n        state.outputFrame.pad(padding);\n\n        state.filterPasses.length = 0;\n\n        if (autoFit)\n        {\n            state.targetFrame = state.outputFrame.clone();\n            state.targetFrame.ceil(resolution);\n            state.outputFrame.fit(this.renderer.renderTexture.sourceFrame);\n        }\n        else\n        {\n            state.targetFrame = state.outputFrame;\n        }\n\n        state.outputFrame.ceil();\n\n        const { filterPasses, targetFrame, outputFrame } = state;\n\n        let filterPassFrame = outputFrame;\n        let renderable = true;\n        let filtersMutable = false;\n\n        for (let i = filters.length - 1; i >= 0; i--)\n        {\n            const filter = filters[i];\n\n            filter.viewport = state.viewport;\n            filter.measure(targetFrame, filterPassFrame.clone(), padding);\n            const filterInput = filters[i].frame.fit(targetFrame);\n\n            if (filterInput.width <= 0 || filterInput.height <= 0)\n            {\n                if (!filtersMutable)\n                {\n                    filters = state.filters.slice();\n                    state.filters = filters;\n                    filtersMutable = true;\n                }\n\n                filters.splice(i, 1);\n            }\n            else\n            {\n                renderable = renderable && filter.renderable;\n                filterInput.ceil();\n\n                filterPasses.unshift(new FilterPass(\n                    filterInput.clone(),\n                    filterInput.clone(),\n                    filterPassFrame.clone(),\n                    filterPassFrame.clone(),\n                ));\n\n                filterPassFrame = filterInput;\n            }\n\n        // filterPassFrame is the same\n        }\n        state.renderable = renderable;\n\n        // filters may become empty if filters return empty rectangles as inputs.\n        state.inputFrame = filters[0] && filters[0].frame ? filters[0].frame : outputFrame;\n    }\n\n    /**\n     * Premeasure the frames needed by the filter system during a render pass.\n     *\n     * This is useful if you need measurements in a custom `render` method.\n     *\n     * TODO: Support caching measurements until flushing the filter pipe\n     *\n     * @param {PIXI.DisplayObject} target\n     * @param {Array<PIXI.Filter>} filters\n     * @returns {FilterPipe} pipe with measurements\n     */\n    premeasure(target, filters, options = target.filterOptions)\n    {\n        const pipe = this._newPipe(target, filters);\n\n        if (options)\n        {\n            pipe.viewport = options.viewport;\n        }\n\n        this.measure(pipe);\n\n        return pipe;\n    }\n\n    /**\n     * @param {FilterPipe} state\n     * @returns {PIXI.RenderTexture} - render texture suitable for the given filter pipe\n     */\n    filterPassRenderTextureFor(state)\n    {\n        let width = 0;\n\n        let height = 0;\n\n        let defaultIncluded = false;\n\n        for (let i = 0; i < state.filters.length; i++)\n        {\n            const filter = state.filters[i];\n\n            if (filter.frame)\n            {\n                width = Math.max(width, filter.frame.width);\n                height = Math.max(height, filter.frame.height);\n            }\n            else if (!defaultIncluded)\n            {\n                width = Math.max(width, state.outputFrame.width);\n                height = Math.max(height, state.outputFrame.height);\n                defaultIncluded = true;\n            }\n        }\n\n        return this.getOptimalFilterTexture(Math.ceil(width), Math.ceil(height), state.resolution);\n    }\n\n    updateUniforms(filterPass)\n    {\n        const globalUniforms = this.globalUniforms.uniforms;\n\n        globalUniforms.inputFrame.copyFrom(filterPass.inputFrame);\n        //    globalUniforms.targetInFrame = filterPass.targetInFrame;\n        globalUniforms.outputFrame.copyFrom(filterPass.outputFrame);\n        //  globalUniforms.targetOutFrame = filterPass.targetOutFrame;\n\n        this.globalUniforms.update();\n    }\n\n    updateTextureUniforms(texture)\n    {\n        const { inputSize, inputPixel } = this.globalUniforms.uniforms;\n\n        inputSize[0] = texture.width;\n        inputSize[1] = texture.height;\n        inputSize[2] = 1.0 / inputSize[0];\n        inputSize[3] = 1.0 / inputSize[1];\n\n        inputPixel[0] = inputSize[0] * texture.resolution;\n        inputPixel[1] = inputSize[1] * texture.resolution;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        this.globalUniforms.update();\n    }\n\n    passUniforms(state, filterIndex)\n    {\n        this._lastFilterIndex = filterIndex;\n\n        const filter = state.filters[filterIndex];\n        const nextFilter = (filterIndex === state.filters.length - 1) ? null : state.filters[filterIndex + 1];\n        const globalUniforms = this.globalUniforms.uniforms;\n        const { inputSize, inputPixel, inputClamp, objectClamp, inputFrameInverse, outputFrameInverse } = globalUniforms;\n        const inputFrame = filter.frame;\n        const outputFrame = nextFilter ? nextFilter.frame : state.outputFrame;\n\n        inputClamp[2] = (inputFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (inputFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        objectClamp[0] = (Math.floor(state.nakedTargetBounds.left - inputFrame.left) + 0.5) * inputPixel[2];\n        objectClamp[1] = (Math.floor(state.nakedTargetBounds.top - inputFrame.top) + 0.5) * inputPixel[3];\n        objectClamp[2] = (Math.ceil(inputFrame.width - inputFrame.right + state.nakedTargetBounds.right) - 0.5) * inputPixel[2];\n        objectClamp[3] = (Math.ceil(inputFrame.height - inputFrame.bottom + state.nakedTargetBounds.bottom) - 0.5) * inputPixel[3];\n\n        this.updateUniforms(state.filterPasses[filterIndex]);\n\n        inputFrameInverse[0] = 1 / inputFrame.width;\n        inputFrameInverse[1] = 1 / inputFrame.height;\n\n        outputFrameInverse[0] = 1 / outputFrame.width;\n        outputFrameInverse[1] = 1 / outputFrame.height;\n\n        //        if (state.legacy)\n        {\n            const filterArea = globalUniforms.filterArea;\n\n            filterArea[0] = state.textureDimensions.x;\n            filterArea[1] = state.textureDimensions.y;\n            filterArea[2] = outputFrame.x;\n            filterArea[3] = outputFrame.y;\n\n            globalUniforms.filterClamp = globalUniforms.inputClamp;\n        }\n\n        this.globalUniforms.update();\n    }\n\n    /**\n     * Resolve any prescribed behaviours.\n     * @private\n     */\n    resolveRenderOptions(renderOptions, state)\n    {\n        const clone = Object.assign({}, renderOptions);\n\n        if (clone.frame === FilterRects.NAKED_TARGET)\n        {\n            clone.frame = state.nakedTargetBounds.clone().fit(this.inputFrame);\n        }\n        else if (clone.frame === FilterRects.WHOLE_INPUT)\n        {\n            clone.frame = this.inputFrame.clone();\n        }\n\n        if (clone.frame)\n        {\n            clone.geometry = this.convertFrameToGeometry(clone.frame);\n        }\n\n        return clone;\n    }\n\n    /**\n     * Converts the given frame into a geometry that the default vertex shader will\n     * draw. `frame` should fit inside `outputFrame`.\n     * @param {Rectangle} frame - the frame to draw\n     * @param {Rectangle}[outputFrame] - the output frame in which the filter operates. This\n     *      is what the texture being drawn to represents.\n     * @returns {Geometry} - the geometry to be used\n     */\n    convertFrameToGeometry(frame, outputFrame = this.outputFrame)\n    {\n        const u0 = (frame.x - outputFrame.x) / outputFrame.width;\n        const u1 = (frame.x - outputFrame.x + frame.width) / outputFrame.width;\n        const v0 = (frame.y - outputFrame.y) / outputFrame.height;\n        const v1 = (frame.y - outputFrame.y + frame.height) / outputFrame.height;\n        const geometry = this._newGeometry();\n\n        geometry.addAttribute('aVertexPosition', [\n            u0, v0,\n            u1, v0,\n            u1, v1,\n            u0, v1,\n        ]);\n\n        geometry.addIndex(GEOMETRY_INDICES);\n\n        return geometry;\n    }\n\n    convertFrameToClamp(frame, outputFrame = this.outputFrame, textureDimensions = this.activeState.textureDimensions)\n    {\n        const clamp = new Float32Array(4);\n\n        clamp[0] = (Math.floor(frame.x - outputFrame.x) + 0.5) / textureDimensions.x;\n        clamp[1] = (Math.floor(frame.y - outputFrame.y) + 0.5) / textureDimensions.y;\n        clamp[2] = (Math.ceil(frame.x + frame.width - outputFrame.x) - 0.5) / textureDimensions.x;\n        clamp[3] = (Math.ceil(frame.x + frame.height - outputFrame.x) - 0.5) / textureDimensions.y;\n\n        return clamp;\n    }\n\n    _newPipe(target, filters)\n    {\n        const pipe = this.statePool.pop() || new FilterPipe();\n\n        if (target)\n        {\n            pipe.target = target;\n            pipe.filters = filters ? filters : target.filters;\n        }\n\n        return pipe;\n    }\n\n    _newGeometry()\n    {\n        return FilterSystem.geometryPool.pop() || new Geometry();\n    }\n\n    /** @override */\n    getFilterTexture(input, resolution)\n    {\n        if (input === undefined)\n        {\n            console.error('Warning: getFilterTexture without a reference texture '\n                + 'is deprecated. It defaults to a texture of the same size as output.');\n            console.error(new Error().stack);\n        }\n\n        return super.getFilterTexture(input, resolution);\n    }\n}\n\n/**\n * Pools of geometry objects for internal usage.\n * @member {PIXI.Geometry[]}\n * @private\n */\nFilterSystem.geometryPool = [];\n\n/**\n * Pass these options to `FilterSystem#applyFilter` for additional features.\n *\n * @typedef {object} RenderOptions\n * @property {PIXI.DRAW_MODES][drawMode = PIXI.DRAW_MODES.TRIANGLE_STRIP]\n * @property {PIXI.Geometry}[geometry] - geometry to draw for the filter\n * @property {PIXI.Rectangle}[frame] - frame to draw in output texture (converted to geometry)\n */\n\n/**\n * Pass these options to `FilterSystem#push`\n *\n * @typedef {object} ScopeOptions\n * @namespace PIXI\n * @property {number} padding - atleast this much padding will be provided\n * @property {number} resolution - override resolution for filters\n * @property {PIXI.Viewport} viewport - viewport provided to filters\n */\n","import { Filter } from './Filter';\n\n/**\n * Filters that are composed of additional filter passes should extend this\n * instead for lifecycle methods.\n */\nexport class CompositeFilter extends Filter\n{\n    constructor(...args)\n    {\n        super(...args);\n\n        /**\n         * Filters owned by this.\n         * @readonly\n         * @member {Filter[]}\n         */\n        this.nestedFilters = [];\n    }\n\n    /**\n     * Keep the given filter as a nested filter. This will bind the padding\n     * & viewport properties of this filter to the nested filter.\n     *\n     * @param {PIXI.Filter} filter\n     * @param {boolean}[noBind=false] - prevents uniform binding from parent to child\n     * @returns {PIXI.Filter} the given filter\n     * @protected\n     */\n    keep(filter, noBind = false)\n    {\n        filter.parentFilter = this;\n        filter.viewport = this.viewport;\n        filter.uniforms.binding = noBind ? null : this.uniformGroup;\n\n        this.nestedFilters.push(filter);\n\n        return filter;\n    }\n\n    /**\n     * Remove the given filter from the nested filters.\n     * @param {PIXI.Filter} filter\n     * @protected\n     */\n    kick(filter)\n    {\n        const index = this.nestedFilters.indexOf(filter);\n\n        if (index > 0)\n        {\n            filter.uniforms.binding = null;\n            filter.parentFilter = null;\n            this.nestedFilters.splice(index, 1);\n        }\n    }\n\n    get viewport()\n    {\n        return this._viewport;\n    }\n    set viewport(value)\n    {\n        this._viewport = value;\n\n        for (const filter of this.nestedFilters)\n        {\n            filter.viewport = value;\n        }\n    }\n}\n","import { SCALE_MODES } from 'pixi.js';\n\n/**\n * A filter-pipe can be used by composite filters to manage their multi-pass pipeline. It\n * automates setting input-/output- frames for each pass, saving & using intermediate\n * textures, allocating intermediate textures, and overriding some global uniforms.\n *\n * An intermediate texture (i.e. not the input or final output texture) is called a bridge\n * texture. All bridge textures have the same dimensions (equal to the dimensions of the\n * input & output textures provided by the filter-manager).\n *\n * A pipe is a reusable object. Its lifecycle is defined by the the `open` and `closeWith`\n * methods.\n *\n * @memberof PHX\n * @class\n */\nexport class FilterPipe\n{\n    constructor()\n    {\n        this._bridgeTextures = [];\n        this._savedTextures = [];\n\n        /**\n         * Uniforms that require automated conversion\n         * @private\n         */\n        this.auto = {};\n\n        /**\n         * Whether uniforms automation is being used.\n         * @private\n         * @member {boolean}\n         */\n        this.autoMode = false;\n    }\n\n    /**\n     * (Re-)open this pipe with the given state variables.\n     * @param {PIXI.systems.FilterSystem} filterManager\n     * @param {PIXI.RenderTexture} input\n     * @param {PIXI.RenderTexture} output\n     * @param {boolean} clear\n     * @param {object} state\n     * @returns {FilterPipe} - `this` for chaining\n     */\n    open(filterManager, input, output, clear, state)\n    {\n        this.filterManager = filterManager;\n        this.input = input;\n        this.output = output;\n        this.clear = clear;\n        this.state = state;\n\n        /**\n         * Copy of whether the initial input was writable\n         * @readonly\n         * @member {boolean}\n         */\n        this.inputWritable = this.state.inputWritable;\n\n        /**\n         * The current intermediate texture\n         * @readonly\n         * @member {PIXI.RenderTexture}\n         */\n        this.bridgeTexture = input;\n\n        /**\n         * Whether to save the current bridge-texture after the next `bridge`\n         * call.\n         * @readonly\n         * @member {boolean}\n         * @see {PIXI.FilterPipe#save}\n         */\n        this.saveTexture = false;\n\n        /**\n         * The frame of the current bridge-texture.\n         * @readonly\n         * @member {PIXI.Rectangle}\n         */\n        this.bridgedFrame = filterManager.inputFrame.clone();\n\n        /**\n         * A copy of the final output-frame given by the filter-manager. The filter-manager's\n         * copy will be overwritten by a `bridge` call.\n         * @readonly\n         * @member {PIXI.Rectangle}\n         */\n        this.endFrame = state.currentFilterPass.outputFrame;\n\n        if (state.outputSwappable)\n        {\n            this.returnBridgeTexture(output);// output could be used as an intermediate too\n        }\n\n        return this;\n    }\n\n    /**\n     * Save the bridged texture after the next `bridge` call. It will be pushed\n     * onto the save-stack. You can use it via `FilterPipe#use`.\n     *\n     * WARNING: If the filter used in the next `bridge` call does not obey\n     * `state.inputWritable=false`, then your saved texture may be corrupted. In\n     * order to hedge against this, you should call save and then bridge an identity\n     * filter (`filterManager.identityFilter`) and then bridge the filter you\n     * need.\n     * @returns {PIXI.FilterPipe} `this`\n     */\n    save()\n    {\n        this.saveTexture = true;\n\n        return this;\n    }\n\n    /**\n     * Use a saved texture, given its save-index. The save-index is the no. of save\n     * calls you did before saving that texture, e.g. if you want to get the first\n     * saved texture, its save-index is zero; however, if you have called `free` for\n     * that particular save-index, `null` will be passed.\n     * @param {number} saveIndex - no. of textures saved before the required one\n     * @param {FilterPipe~useCallback} op - a function that uses the texture\n     * @returns {PIXI.FilterPipe} `this`\n     */\n    use(saveIndex = 0, op)\n    {\n        if (op)\n        {\n            op(this._savedTextures[saveIndex]);\n        }\n\n        return this;\n    }\n\n    /**\n     * Free a saved texture, given its save-index; subsequent calls to `use` will\n     * pass `null` for this save-index.\n     * @param {number}[saveIndex=0]\n     * @returns {PIXI.FilterPipe} this\n     */\n    free(saveIndex = 0)\n    {\n        const freedTexture = this._savedTextures[saveIndex];\n\n        this._savedTextures[saveIndex] = null;\n        this.returnBridgeTexture(freedTexture);\n\n        return this;\n    }\n\n    /**\n     * Applies the given filter on a intermediate render-texture output.\n     *\n     * NOTE: The output (`nextFrame`) given for this filter automatically becomes the\n     * input for the next filter.\n     * @param {PIXI.Filter} filter - filter to apply\n     * @param {PIXI.Rectangle}[nextFrame=this.filterManager.inputFrame] - output-frame for this filter\n     * @param {object} renderOptions - render-options to pass to the filter\n     * @returns {PIXI.FilterPipe} - `this`\n     */\n    bridge(filter, nextFrame = this.bridgedFrame, renderOptions)\n    {\n        const inputWritableHere = this.inputWritable || this.bridgeTexture !== this.input;\n\n        this.state.inputWritable = !this.saveTexture && inputWritableHere;\n\n        const nextTexture = this.getBridgeTexture(nextFrame);\n\n        this.filterManager.outputFrame.copyFrom(nextFrame);\n        this.autoRun();\n\n        const nextOverride = filter.apply(this.filterManager, this.bridgeTexture,\n            nextTexture, true, this.state, renderOptions);\n\n        this.filterManager.inputFrame.copyFrom(nextFrame);// it is not next anymore :)\n        this.filterManager.globalUniforms.update();\n\n        // take care of the input bridge texture\n        if (this.saveTexture)\n        {\n            this._savedTextures.push(this.bridgeTexture);\n            this.saveTexture = false;\n        }\n        else if (nextOverride !== this.bridgeTexture && inputWritableHere)\n        {\n            this.returnBridgeTexture(this.bridgeTexture);\n        }\n\n        // take care of the output bridge texture\n        if (nextOverride)\n        {\n            this.bridgeTexture = nextOverride;\n\n            if (nextOverride !== nextTexture)\n            { this.returnBridgeTexture(nextTexture); }\n        }\n        else\n        {\n            this.bridgeTexture = nextTexture;\n        }\n\n        this.bridgedFrame = nextFrame.clone();\n\n        return this;\n    }\n\n    /**\n     * Passes the current bridge-texture to the callback.\n     * @param {PIXI.FilterPipe~useCallback} op\n     * @returns {PIXI.FilterPipe} - `this`\n     */\n    useBridge(op)\n    {\n        op(this.bridgeTexture);\n\n        return this;\n    }\n\n    /**\n     * Applies the given filter as the last filter for this pipe. The output-frame must be\n     * the one specified by the filter-manager.\n     * @param {PIXI.Filter} filter\n     * @param {object} renderOptions - render-options to pass to the filter.\n     * @param {boolean}[noFinalize=false] - (experimental) don't finalize this pipe; use this\n     *      when going to reset pipe to create another cycle.\n     * @returns {PIXI.RenderTexture} - the closing texture, i.e. the texture that contains\n     * the output. This must be returned to the filter-manager by the filter's `apply` method.\n     */\n    closeWith(filter, renderOptions, noFinalize = false)\n    {\n        const inputWritableHere = !this.saveTexture && (this.inputWritable || this.bridgeTexture !== this.input);\n\n        this.state.inputWritable = inputWritableHere;\n\n        this.filterManager.outputFrame.copyFrom(this.endFrame);\n        this.autoRun();\n        this.filterManager.globalUniforms.update();\n\n        const closingTextureOverride = filter.apply(this.filterManager, this.bridgeTexture, this.closingTexture,\n            this.clear, this.state, renderOptions);\n\n        if (this.saveTexture)\n        {\n            this._savedTextures.push(this.bridgeTexture);\n            this.saveTexture = false;\n        }\n        else if (closingTextureOverride !== this.bridgeTexture && inputWritableHere)\n        {\n            this.returnBridgeTexture(this.bridgeTexture);\n        }\n\n        if (closingTextureOverride && closingTextureOverride !== this.closingTexture)\n        {\n            this.overrideClosingTexture(closingTextureOverride);\n        }\n\n        const closingTexture = this.closingTexture;\n\n        if (!noFinalize)\n        {\n            this.finalize();\n        }\n\n        return closingTexture;\n    }\n\n    reset()\n    {\n        // TODO: Finish this!\n    }\n\n    /**\n     * Automate object-clamp setting by specifying the frame of the clamp, rather than\n     * the clamp's value itself. To turn this off, call this again without any parameter.\n     * @param {PIXI.Rectangle}[frame]\n     * @returns {PIXI.FilterPipe} `this`\n     */\n    autoClamp(frame)\n    {\n        this.auto.objectClamp = frame ? frame : 0;\n        this.autoMode = true;\n\n        return this;\n    }\n\n    /**\n     * Sets all the global uniforms set in `auto`.\n     * @private\n     */\n    autoRun()\n    {\n        if (!this.autoMode)\n        {\n            return;\n        }\n\n        const { filterManager } = this;\n        const { uniforms } = filterManager.globalUniforms;\n\n        if (this.auto.objectClamp && this.auto.objectClamp !== 0)\n        {\n            uniforms.objectClamp = filterManager.convertFrameToClamp(this.auto.objectClamp);\n        }\n        else if (this.auto.objectClamp === 0)\n        {\n            uniforms.objectClamp = filterManager.convertFrameToClamp(this.state.nakedTargetBounds);\n            this.auto.objectClamp = undefined;\n        }\n\n        filterManager.globalUniforms.update();\n    }\n\n    /**\n     * Releases any resources held by this filter-pipe.\n     * @private\n     */\n    finalize()\n    {\n        const { input, output } = this;\n\n        for (let i = 0; i < this._bridgeTextures.length; i++)\n        {\n            const tex = this._bridgeTextures[i];\n\n            if (tex === input || tex === output)\n            {\n                continue;\n            }\n\n            this.filterManager.returnFilterTexture(tex);\n        }\n\n        if (this.bridgeTexture !== this.input && this.bridgeTexture !== this.output)\n        {\n            this.filterManager.returnFilterTexture(this.bridgeTexture);\n            this.bridgeTexture = null;\n        }\n\n        this._bridgeTextures.length = 0;\n\n        const closing = this.closingTexture;\n\n        for (let j = 0; j < this._savedTextures.length; j++)\n        {\n            const tex = this._savedTextures[j];\n\n            if (tex === input || tex === output || tex === closing)\n            {\n                continue;\n            }\n\n            if (tex !== null)\n            {\n                this.filterManager.returnFilterTexture(tex);\n            }\n        }\n\n        this._savedTextures.length = 0;\n\n        this._closingTexture = undefined;\n        this.filterManager = null;\n        this.input = null;\n        this.output = null;\n        this.clear = null;\n        this.state = null;\n\n        this.auto = {};\n        this.autoMode = false;\n        this.bridgeTextureOptions = null;\n    }\n\n    get bridgeTextureOptions()\n    {\n        return this._bridgeTextureOptions;\n    }\n    set bridgeTextureOptions(value)\n    {\n        this._bridgeTextureOptions = value;\n    }\n\n    /**\n     * A filter texture that can be used in bridges.\n     * @readonly\n     * @param {PIXI.Rectangle} frame - frame that the texture will hold\n     * @returns {PIXI.RenderTexture}\n     */\n    getBridgeTexture(frame)\n    {\n        let bridgeTexture;\n\n        if (this._bridgeTextures.length > 0)\n        {\n            bridgeTexture = this._bridgeTextures.pop();\n        }\n        else\n        {\n            bridgeTexture = this.filterManager.getFilterTexture(this.input);\n        }\n\n        bridgeTexture.filterFrame = frame;// this will be set when used!\n\n        if (this.bridgeTextureOptions)\n        {\n            bridgeTexture.scaleMode = this.bridgeTextureOptions.scaleMode;\n            if (bridgeTexture.scaleMode === undefined)\n            {\n                bridgeTexture.scaleMode = SCALE_MODES.LINEAR;\n            }\n        }\n\n        return bridgeTexture;\n    }\n\n    /**\n     * Free a bridge texture for use by this pipe.\n     * @param {PIXI.RenderTexture} tex - a bridge texture that can be used for writes\n     */\n    returnBridgeTexture(tex)\n    {\n        if (!this.inputWritable && tex === this.input)\n        {\n            return;\n        }\n\n        this._bridgeTextures.push(tex);\n    }\n\n    /**\n     * The texture to be used for the last filter pass.\n     * @returns {PIXI.RenderTexture}\n     */\n    get closingTexture()\n    {\n        if (this._closingTexture)\n        {\n            return this._closingTexture;\n        }\n\n        if (this.state.outputSwappable)\n        {\n            this._closingTexture = this.getBridgeTexture(this.endFrame);\n\n            return this._closingTexture;\n        }\n\n        this._closingTexture = this.output;\n\n        return this._closingTexture;\n    }\n\n    /**\n     * @private\n     * @param {PIXI.Texture} tex\n     */\n    overrideClosingTexture(tex)\n    {\n        if (this._closingTexture && (tex !== this.output || this.state.outputSwappable))\n        {\n            this.returnBridgeTexture(this._closingTexture);\n        }\n\n        this._closingTexture = tex;\n    }\n}\n\n/**\n * A singleton instance of `FilterPipe`, which is reusable.\n * @static\n * @member {PIXI.FilterPipe}\n */\nFilterPipe.instance = new FilterPipe();\n\n/**\n * @callback PIXI.FilterPipe~useCallback\n * @param {PIXI.Texture?} tex\n */\n","import { FilterSystem } from './FilterSystem';\n\n/**\n * @namespace PHX\n */\n\n/**\n * @param {PIXI.Renderer} renderer\n */\nexport function injectEF(renderer)\n{\n    const hppf = new FilterSystem(renderer);\n\n    for (const i in renderer.runners)\n    {\n        renderer.runners[i].remove(renderer.filter);\n        renderer.runners[i].add(hppf);\n    }\n\n    renderer.filter = hppf;\n\n    return renderer;\n}\n\nexport { CompositeFilter } from './CompositeFilter';\nexport { Filter, Filter as default } from './Filter';\nexport { FilterPipe } from './FilterPipe';\nexport { FilterScope } from './FilterScope';\nexport { FILTER_RECTS } from './FilterRects';\nexport { FilterPass } from './FilterPass';\n"],"names":["BaseFilter","FilterRects","FilterPipe"],"mappings":"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"}